# -*- coding: utf-8 -*-
"""day04_classification_fashion_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WRYfdK1BUbZgkuunwUG6WUYEonbUT3Rf

## 라이브러리 import
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from keras.utils import np_utils
from tensorflow.keras import datasets

"""## 데이터 로드"""

(X_train, Y_train), (X_test, Y_test) = datasets.fashion_mnist.load_data()
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

"""### 데이터 확인"""

labels = ['Tshirt', 'trouser', 'pullover', 'dress', 'coat',
         'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot']

# 임의의 데이터 확인
my_sample = np.random.randint(60000)
plt.imshow(X_train[my_sample], cmap='gray')
plt.axis('off')
plt.show()
print(labels[Y_train[my_sample]])
print(X_train[my_sample])

"""## 데이터 전처리

### one-hot encoding
"""

# np_utils.to_categorical()을 사용해 one-hot encoding
y_train = np_utils.to_categorical(Y_train)
y_test = np_utils.to_categorical(Y_test)
print(Y_train[5000])
print(y_train[5000])

"""### reshape, scaling"""

# 모델에 적용하기 위해 차원 축소
# 나중에 그림 확인하기 위해 원본 데이터 보존
x_train = X_train.reshape(-1, 28 * 28)
x_test = X_test.reshape(-1, 28 * 28)
# minmax scaling
x_train = x_train / 255
x_test = x_test / 255
print(x_train.shape, x_test.shape)

"""## 모델 생성"""

model = Sequential()
model.add(Dense(64, input_dim=784, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'],
)
print(model.summary())

"""## 모델 학습"""

fit_hist = model.fit(x_train, y_train, batch_size=16, epochs=7, verbose=1, validation_split=0.2)

"""## 학습 결과 확인"""

score = model.evaluate(x_test, y_test, verbose=0)
print('Final test set accuracy:', score[1])

# train, test accuracy 확인
plt.plot(fit_hist.history['accuracy'], label='train')
plt.plot(fit_hist.history['val_accuracy'], label='test')
plt.legend(loc='best')
plt.show()

# 임의의 행 추출해 모델 확인
my_sample = np.random.randint(10000)
plt.imshow(X_test[my_sample], cmap='gray')
plt.axis('off')
plt.show()
sample = x_test[my_sample]
sample = sample.reshape(1, -1) # 모델에 테스트하기 위해 2차원으로 바꿔줌
pred = model.predict(sample)
print(pred)
print(Y_test[my_sample])
print('Target:', labels[Y_test[my_sample]])
print('Prediction after learning:', labels[np.argmax(pred)])